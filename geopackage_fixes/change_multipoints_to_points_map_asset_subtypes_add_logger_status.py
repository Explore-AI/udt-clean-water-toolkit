# -*- coding: utf-8 -*-
"""Change MultiPoints to Points | Map Asset Subtypes | Add Logger Status.ipynb

Automatically generated by Colab.
"""

import fiona
from shapely.geometry import Point
import os
import geopandas as gpd
import pandas as pd

# from google.colab import drive <- replace with method for importing gpkg file
#drive.mount('/content/drive/', force_remount=True)
#os.chdir("/content/drive/MyDrive")

# set paths for files (original that needs to be fixed, new aka destination,
# old file was for spatial join to bring GISID back. CSV is for logger status
original_gpkg = "/content/drive/MyDrive/tw_cleanwater_network_layers.gpkg"

new_gpkg = "/content/drive/MyDrive/tw_cleanwater_network_layers_singlepart_subtypes_loggerstatus.gpkg"

old_gpkg = "/content/drive/MyDrive/tw_cleanwater_network_layers_old.gpkg"

csv = "/content/drive/MyDrive/acoustic_logger_status_gsid_mapping.csv"

logger_df = pd.read_csv(csv)
del logger_df['Unnamed: 0']

# layers that have subtype codes
codelayers = ['wNetworkMeter', 'wPressureContValve', 'wPressureFitting', 'wOperationalSite']
# layers with logger status
loggerlayers = list(logger_df['Model'].unique())
# gdf with GISIDs for wNetworkOptValve
old_netw_gdf = gpd.read_file(old_gpkg, layer='wNetworkOptValve')

# Read the original GeoPackage, find MultiPoint geometry and convert to Point, add all layers into new GeoPackage
for layer_name in fiona.listlayers(original_gpkg):
    # make gdf from layer
    original_gdf = gpd.read_file(original_gpkg, layer=layer_name)
    # find list of unique geometry types
    geometry_type = original_gdf.geom_type.unique()
    if layer_name in loggerlayers:
    # select loggers status corresponding with model name
        loggers = logger_df.loc[logger_df["Model"] == layer_name]
    # fix GISIDs for wNetworkOptValve layer
    if layer_name == 'wNetworkOptValve':
        original_gdf = gpd.sjoin(original_gdf, old_netw_gdf[['geometry', 'GISID']], how='left', predicate='covers')
    # add logger status column to gdf
    try:
        original_gdf = pd.merge(original_gdf, loggers[['GISID', 'Acoustic_Logger']], left_on=['GISID'], right_on=['GISID'], how='left')
        print("merge successful: ", layer_name)
    except Exception as e:
        print("An error occurred during the merge: ", e, layer_name)
    # add subtypes to specified layers, mapped to subtype codes
    if layer_name in codelayers:
        original_gdf['SUBTYPE'] = None
        if layer_name == 'wNetworkMeter':
            original_gdf['SUBTYPE'] = original_gdf['SUBTYPECD'].map({
                1: 'District Meter',
                2: 'Zonal Meter',
                3: 'Distribution Input Meter',
                4: 'Waste Meter',
                5: 'Fire Meter'
            })
        if layer_name == 'wPressureContValve':
            original_gdf['SUBTYPE'] = original_gdf['SUBTYPECD'].map({
                1: 'Pressure Reducing',
                2: 'Non Return Valve',
                3: 'Pressure Sustaining',
                4: 'Needle',
                5: 'Plug Valve'
            })
        if layer_name == 'wPressureFitting':
            original_gdf['SUBTYPE'] = original_gdf['SUBTYPECD'].map({
                1: 'Tapping Point',
                2: 'Telemetry Pit',
                3: 'Transducer'
            })
        if layer_name == 'wOperationalSite':
            original_gdf['SUBTYPE'] = original_gdf['SUBTYPECD'].map({
                1: 'Booster Station',
                2: 'Borehole',
                3: 'Break Pressure Tank',
                4: 'Pumping Station',
                5: 'Reservoir Covered',
                6: 'Service Reservoir',
                7: 'Shaft Inspection',
                8: 'Shaft Pumping',
                9: 'Treatment Works',
                10: 'Water Tower',
                11: 'Raw Water Storage Reservoir',
                12: 'Other',
                13: 'Unknown'
            })
    # fix multipoint geometry
    if geometry_type == 'MultiPoint':
        geom = original_gdf.geometry
        original_gdf.geometry = geom.centroid.apply(Point)
        # save out layer to new gpkg
        original_gdf.to_file(new_gpkg, driver="GPKG", layer=layer_name)
    else:
        original_gdf.to_file(new_gpkg, driver="GPKG", layer=layer_name)

for layer_name in fiona.listlayers(old_gpkg):
    old_gdf = gpd.read_file(old_gpkg, layer=layer_name)
    print(layer_name, old_gdf.shape)

for layer_name in fiona.listlayers(new_gpkg):
    new_gdf = gpd.read_file(new_gpkg, layer=layer_name)
    print(layer_name, new_gdf.shape)